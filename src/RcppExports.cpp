// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// llinsolve
Eigen::VectorXd llinsolve(const Eigen::MatrixXd& A, const Eigen::VectorXd& b);
RcppExport SEXP _gfimmCPP_llinsolve(SEXP ASEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(llinsolve(A, b));
    return rcpp_result_gen;
END_RCPP
}
// tsolveAndMultiply
Eigen::MatrixXd tsolveAndMultiply(const Eigen::MatrixXd& A, const Eigen::MatrixXd& C);
RcppExport SEXP _gfimmCPP_tsolveAndMultiply(SEXP ASEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(tsolveAndMultiply(A, C));
    return rcpp_result_gen;
END_RCPP
}
// nullSpace
Rcpp::List nullSpace(const Eigen::MatrixXd M);
RcppExport SEXP _gfimmCPP_nullSpace(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(nullSpace(M));
    return rcpp_result_gen;
END_RCPP
}
// QRdecomp
Rcpp::List QRdecomp(const Eigen::MatrixXd& M);
RcppExport SEXP _gfimmCPP_QRdecomp(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(QRdecomp(M));
    return rcpp_result_gen;
END_RCPP
}
// whichLU
Eigen::VectorXd whichLU(const Eigen::VectorXd& V, double L, double U);
RcppExport SEXP _gfimmCPP_whichLU(SEXP VSEXP, SEXP LSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(whichLU(V, L, U));
    return rcpp_result_gen;
END_RCPP
}
// main
int main();
RcppExport SEXP _gfimmCPP_main() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(main());
    return rcpp_result_gen;
END_RCPP
}
// ListOfGmatrices
std::vector<Eigen::MatrixXd> ListOfGmatrices(size_t nrows, size_t ncols, size_t nmatrices);
RcppExport SEXP _gfimmCPP_ListOfGmatrices(SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP nmatricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< size_t >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< size_t >::type nmatrices(nmatricesSEXP);
    rcpp_result_gen = Rcpp::wrap(ListOfGmatrices(nrows, ncols, nmatrices));
    return rcpp_result_gen;
END_RCPP
}
// testcbind
Eigen::MatrixXd testcbind();
RcppExport SEXP _gfimmCPP_testcbind() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(testcbind());
    return rcpp_result_gen;
END_RCPP
}
// temp
int temp(unsigned n);
RcppExport SEXP _gfimmCPP_temp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(temp(n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gfimmCPP_llinsolve", (DL_FUNC) &_gfimmCPP_llinsolve, 2},
    {"_gfimmCPP_tsolveAndMultiply", (DL_FUNC) &_gfimmCPP_tsolveAndMultiply, 2},
    {"_gfimmCPP_nullSpace", (DL_FUNC) &_gfimmCPP_nullSpace, 1},
    {"_gfimmCPP_QRdecomp", (DL_FUNC) &_gfimmCPP_QRdecomp, 1},
    {"_gfimmCPP_whichLU", (DL_FUNC) &_gfimmCPP_whichLU, 3},
    {"_gfimmCPP_main", (DL_FUNC) &_gfimmCPP_main, 0},
    {"_gfimmCPP_ListOfGmatrices", (DL_FUNC) &_gfimmCPP_ListOfGmatrices, 3},
    {"_gfimmCPP_testcbind", (DL_FUNC) &_gfimmCPP_testcbind, 0},
    {"_gfimmCPP_temp", (DL_FUNC) &_gfimmCPP_temp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_gfimmCPP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
